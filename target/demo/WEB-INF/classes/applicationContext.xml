<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">

    <description>Spring公共配置</description>
    <!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <!--
        <context:component-scan use-default-filters="false" base-package="com.ytport">
            <context:exclude-filter type="regex" expression=".web"/>
        </context:component-scan>
    -->
    <context:component-scan base-package="com.ytport.demo">
    </context:component-scan>
	
	
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>

    <!-- Hibernate配置 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="namingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy"/>
        </property>
        <!-- <property name="entityInterceptor" ref="entityInterceptor"/> -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
            </props>
        </property>
        <property name="packagesToScan" value="com.ytport.demo.*"/>
    </bean>



    <!-- 使用import之后，前面的sessionFactory才会先实例化，这样才会在initialize-database之前对数据库表初始化 -->
    <import resource="security/applicationContext-shiro.xml"/>

    <!-- 事务管理器配置,单数据源事务 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
	<!-- 公共
	<bean id="jspSupport" class="org.springside.modules.utils.spring.JarFileResourcesExtractor" lazy-init="false">
        <constructor-arg index="0" value="jsp/**/*.jsp"/>
        <constructor-arg index="1" value="ytportsoft-springside-2.0.0-SNAPSHOT.jar"/>
        <constructor-arg index="2" value="WEB-INF/content"/>
    </bean>  -->
    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true"/>
    <bean id="dialect" class="com.ytportsoft.dao.jdbc.dialect.Oracle9Dialect"></bean>
    <bean id="dialectMysql" class="com.ytportsoft.dao.jdbc.dialect.MySQLDialect"></bean>
    <bean id="ehcacheManager"
          class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:/cache/ehcache.xml"/>
    </bean>

    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.ytport.base.web</value>
            </list>
        </property>
    </bean>
    <!-- AOP式的全局异常处理 -->
    <bean id="global-ex-interceptor"
          class="com.ytport.util.GlobalExInterceptor">
    </bean>

    <bean id="global-ex-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.ytport.demo.web.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut"/>
        <aop:advisor advice-ref="global-ex-interceptor"
                     pointcut-ref="global-ex-pointcut"/>
    </aop:config>

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
                 init-method="init" destroy-method="close">

    <property name="driverClassName" value="${jdbc.driver}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>

    <property name="maxActive" value="30"/>
    <property name="initialSize" value="20"/>
    <property name="maxWait" value="60000"/>
    <property name="minIdle" value="15"/>

    <property name="timeBetweenEvictionRunsMillis" value="3000"/>
    <property name="minEvictableIdleTimeMillis" value="300000"/>

    <property name="validationQuery" value="SELECT 'x' from dual"/>

    <property name="testWhileIdle" value="true"/>
    <property name="testOnBorrow" value="false"/>
    <property name="testOnReturn" value="false"/>

    <property name="poolPreparedStatements" value="true"/>
    <property name="maxPoolPreparedStatementPerConnectionSize"
              value="20"/>

    <property name="removeAbandoned" value="true"/>
    <!-- 打开removeAbandoned功能 -->
    <property name="removeAbandonedTimeout" value="600"/>
    <!-- 1800秒，也就是30分钟 -->
    <property name="logAbandoned" value="true"/>
    <!-- 关闭abanded连接时输出错误日志 -->
    <property name="timeBetweenLogStatsMillis" value="10000"/>
    <!-- 定时打印druid统计信息 -->
    <!-- 配置监控统计拦截的filters wall防SQL攻击 -->
    <property name="filters" value="stat"/>
    <property name="connectionProperties" value="druid.stat.mergeSql=false"/>
    <property name="proxyFilters">
        <list>
            <ref bean="log-filter"/>
        </list>
    </property>
</bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">

        <property name="statementExecutableSqlLogEnable" value="true"/>
        <property name="statementLogEnabled" value="true"/>
        <property name="connectionLogEnabled" value="false"/>
        <property name="dataSourceLogEnabled" value="false"/>
        <property name="statementParameterSetLogEnabled" value="false"/>

        <property name="statementCreateAfterLogEnabled" value="false"/>
        <property name="statementPrepareAfterLogEnabled" value="false"/>
        <property name="statementPrepareCallAfterLogEnabled" value="false"/>
        <property name="statementExecuteAfterLogEnabled" value="false"/>
        <property name="statementExecuteQueryAfterLogEnabled" value="false"/>
        <property name="statementExecuteUpdateAfterLogEnabled" value="false"/>
        <property name="statementExecuteBatchAfterLogEnabled" value="false"/>
        <property name="statementCloseAfterLogEnabled" value="false"/>
        <property name="statementParameterClearLogEnable" value="false"/>
    </bean>

    <!--注入基本信息-->
    <!--bean id="applicationPropertiesInjector"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod">
            <value>com.ytport.base.service.impl.AppCfg.setAppInfo</value>
        </property>
        <property name="arguments">
            <ref bean="app"/>
        </property>
    </bean>

    <bean id="app" class="com.ytport.base.entity.App">
        <property name="code" value="fgc"/>
        <property name="name" value="烟台港房管处信息系统集成"/>
    </bean-->

    <!-- 生产环境 -->
    <beans profile="production">
        <context:property-placeholder
                ignore-resource-not-found="true" location="classpath*:/application.properties"/>

        <bean id="configProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>classpath*:/application.properties</value>
                </list>
            </property>
        </bean>
        <!-- 这里是生产数据库，千万不能有jdbc:initialize-database这个配置！！ -->
    </beans>

    <!-- 开发环境 -->
    <!-- 在BaseTest中以@ActiveProfiles("develop")注解的方式激活 -->
    <beans profile="develop">
        <context:property-placeholder
                ignore-resource-not-found="false"
                location="classpath*:/application.develop.properties"/>

        <bean id="configProperties"
              class="org.springframework.beans.factory.config.PropertiesFactoryBean">
            <property name="locations">
                <list>
                    <value>classpath*:/application.develop.properties</value>
                </list>
            </property>
        </bean>

        <!-- 下面这个配置将读取数据库脚本并执行，切勿用于生产数据库 -->
        <!--<jdbc:initialize-database data-source="dataSource"
            ignore-failures="ALL">
            <jdbc:script location="classpath:testdata/h2/import-basicdata.sql"
                encoding="UTF-8" />
            <jdbc:script location="classpath:testdata/h2/import-data.sql"
                encoding="UTF-8" />
        </jdbc:initialize-database>-->
    </beans>
</beans>

